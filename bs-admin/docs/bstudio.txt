■ACEエディター

【ソース修正点】

1.横スクロールバーの表示バグ修正
	softwrapをFree（行っている）にもかかわらずinvisibleオブジェクトの表示があった場合は
	maxlineの文字数に1を加算しているため常に横スクロールバーが表示される。

	※本来はsoftwrapの値を参照するべきだが、本システムでは常にsoftwrapをfreeとしているため
	単純にコメントアウト

	行番号：13034

    this.$getLongestLine = function() {
        var charCount = this.session.getScreenWidth();
//        if (this.$textLayer.showInvisibles)
//            charCount += 1;

        return Math.max(this.$size.scrollerWidth - 2 * this.$padding, Math.round(charCount * this.characterWidth));
    };



2.phpの文法解釈のバグ
	<?php widget('0000000006'); // test ?>
	上記の場合　?> もコメントと解釈され、phpの閉じタグがない、と判定されてしまう。

	修正ファイル：worker-php.js

	行番号：2576

            {
                value: PHP.Constants.T_COMMENT,
//              re: /^\/\/.*(\s)?/ fixed (T.Nishida 2013/04/22)
                re: /^\/\/((?!\?>).)*(\s)?/
            },



3.F3キーをfindnext2コマンドとして登録
{
    name: "findnext2",
    bindKey: bindKey("F3", "Command-G"),
    exec: function(editor) { editor.findNext(); },
    readOnly: true
}
shit+F3キーをfindprevious2コマンドとして登録
{
    name: "findprevious2",
    bindKey: bindKey("Shift-F3", "Command-Shift-G"),
    exec: function(editor) { editor.findPrevious(); },
    readOnly: true
}

4.mode-php.jsを修正

    this.$rules = {
        "start" : [
            {
                token : "comment",
//              regex : /(?:#|\/\/)(?:[^?]|\?[^>])*/ fixed (T.Nishida 2013/04/22)
                regex : /(?:#|\/\/)((?!\?>).)*(\s)?/
            },

5.theme-twilight.jsを修正

6.aceエディターはporotype.jsとコンフリクトするためjqueryに変更（フォームのシリアライズ処理）

7.全角文字判定のバグ
line：6729

    function isFullWidth(c) {
               c >= 0x2010 && c <= 0x2E80 ||	// 2329 -> 2010  232A -> 2E80 T.Nishida


line：14218
    this.$renderToken = function(stringBuilder, screenColumn, token, value) {
        var self = this;
        var replaceReg = /\t|&|<|( +)|([\x00-\x1f\x80-\xa0\u1680\u180E\u2000-\u200f\u2028\u2029\u202F\u205F\u3000\uFEFF])|[\u1100-\u115F\u11A3-\u11A7\u11FA-\u11FF\u2010-\u2E80\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3000-\u303E\u3041-\u3096\u3099-\u30FF\u3105-\u312D\u3131-\u318E\u3190-\u31BA\u31C0-\u31E3\u31F0-\u321E\u3220-\u3247\u3250-\u32FE\u3300-\u4DBF\u4E00-\uA48C\uA490-\uA4C6\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFAFF\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFF01-\uFF60\uFFE0-\uFFE6]/g;
        var replaceFunc = function(c, a, b, tabIdx, idx4) {


8. 日本語入力部分を最新にアップデート　かつfirefoxで01の記号が表示される件を修正（0x01はIEで必要である模様）
 　FireFoxがアップデートされたため再修正

3509行目
// 2015.10.16 updated T.Nishida　FireFoxのみPLACEHOLDERは無しにする
	if(useragent.isMozilla) {
// 2017.03.21 chromeも追加（windowsのみ）
	if(useragent.isMozilla || (useragent.isWin && useragent.isWebKit)) {
	    var PLACEHOLDER = "";
	}
	else {
	    var PLACEHOLDER = "\x01\x01";
	}

3584行目
    var isAllSelected = function(text) {
// 2015.10.16 updated T.Nishida　PLACEHOLDERが空だと全選択になってしまう件を修正（FireFoxのみに影響）
		if(!text.value.length) return false;

        return text.selectionStart === 0 && text.selectionEnd === text.value.length;
    };

3798行目
	var onCompositionStart = function(e) {
		if (inComposition || !host.onCompositionStart || host.$readOnly) return;
		inComposition = {};
		host.onCompositionStart();
// 2014/10/29 updated by T.Nishida
//		setTimeout(onCompositionUpdate, 0);
		host.on("mousedown", onCompositionEnd);
		if (!host.selection.isEmpty()) {
		    host.insert("");
		    host.session.markUndoGroup();
		    host.selection.clearSelection();
		}
		host.session.markUndoGroup();
// 2014/10/29 updated by T.Nishida
		onCompositionUpdate();
	};

	var onCompositionUpdate = function() {
		if (!inComposition || !host.onCompositionUpdate || host.$readOnly) return;
// 2014/10/29 updated by T.Nishida
// 2015.10.16 updated T.Nishida　結局この部分は、元に戻す
//		if(useragent.isMozilla) {
//			text.value = text.value.replace(/\x01/g, "");
//			var val = text.value;
//		}
//		else {
	        var val = text.value.replace(/\x01/g, "");
//		}

		if (inComposition.lastValue === val) return;

		host.onCompositionUpdate(val);
		if (inComposition.lastValue) host.undo();

		inComposition.lastValue = val;
		if (inComposition.lastValue) {
			var r = host.selection.getRange();
			host.insert(inComposition.lastValue);
			host.session.markUndoGroup();
			inComposition.range = host.selection.getRange();
			host.selection.setRange(r);
			host.selection.clearSelection();
		}
	};

    var onCompositionEnd = function(e) {
		if (!host.onCompositionEnd || host.$readOnly) return;
		var c = inComposition;
		inComposition = false;
		var timer = setTimeout(function() {
			timer = null;
			var str = text.value.replace(/\x01/g, "");
			if (inComposition)
				return;
			else if (str == c.lastValue)
				resetValue();
			else if (!c.lastValue && str) {
				resetValue();
				sendText(str);
			}
		});
		inputHandler = function compositionInputHandler(str) {
			if (timer) clearTimeout(timer);
			str = str.replace(/\x01/g, "");
			if (str == c.lastValue)
				return "";
			if (c.lastValue && timer)
				host.undo();
			return str;
        };
		host.onCompositionEnd();
		host.removeListener("mousedown", onCompositionEnd);
		if (e.type == "compositionend" && c.range) {
			host.selection.setRange(c.range);
		}
	};

9. ライン最初のタブの次に全角スペースがあった場合、invisibleオブジェクトを表示するとタブの数に全角スペースも含まれてしまう。
	正規表現の\sには全角スペースが含まれるため（utf8の場合）
	正規表現の適宜：	this.$indentGuideRe =  /\s\S| \t|\t |\s$/;


    this.renderIndentGuide = function(stringBuilder, value) {
		// 2015.07.15 updated by T.Nishida for multi byte space
		var tmp = value.replace(/　/, 'X');	⇒　全角スペースを一時的に「X」に変換してsearchするように変更

        var cols = tmp.search(this.$indentGuideRe);
        if (cols <= 0)
            return value;
        if (value[0] == " ") {
            cols -= cols % this.tabSize;
            stringBuilder.push(lang.stringRepeat(this.$tabStrings[" "], cols/this.tabSize));
            return value.substr(cols);
        } else if (value[0] == "\t") {
            stringBuilder.push(lang.stringRepeat(this.$tabStrings["\t"], cols));
            return value.substr(cols);
        }
        return value;
    };

10.　safariのコピー＆ペーストで改行が余分に入ることを修正
	onCopy, onCut, onPasteを最新ソースと入れ替え

	3695行目から

// 2015.11.22 updated T.Nishida
    var handleClipboardData = function(e, data) {
        var clipboardData = e.clipboardData || window.clipboardData;
        if (!clipboardData || BROKEN_SETDATA)
            return;
        var mime = USE_IE_MIME_TYPE ? "Text" : "text/plain";

        ↓

        else {
            text.value = "";
            pasted = true;
        }
    };
*/
// 2015.11.22 updated T.Nishida
	3833行目まで

11. 全角入力時のテキストエリアのletter-spacing、padding-leftを追加
	11972行目

	.ace_text-input.ace_composition {\
	background: #f8f8f8;\
	color: #111;\
	z-index: 1000;\
	opacity: 1;\
	letter-spacing: 2.45px;\
	padding-left: 2px;\
	}\

12. webkitの日本語入力でキーを連続して入力するとテキストエリア（ace_conmposition）のサイズが変化しない件を修正
	3950行目

// 2017/03/22 updated by T.Nishida
	if (useragent.isGecko) {
		event.addListener(text, "text", function(){syncComposition.schedule()});
	} else {
		event.addListener(text, "keyup", function(){syncComposition.schedule()});
		event.addListener(text, "keydown", function(){syncComposition.schedule()});
	}

13. chormeの日本語入力で変換後連続して入力すると変換確定文字がクリアされない件を修正
	3940行目

// 2017/03/23 updated by T.Nishida
		// Workaround for #3027, #3045, #3097, #3100
		if (useragent.isChrome && useragent.isChrome >= 53) {
			onInput();
		}
	};


14. スクロールバーをbframe_scrollに変更
	11939行目　background-color: #141414　を追加

.ace_scrollbar {\
position: absolute;\
overflow: hidden;\
overflow-y: auto;\
right: 0;\
top: 0;\
bottom: 0;\
background-color: #141414;\
}\

	14562行目

	this.setVisible(false);
	this.element.style.overflowY = "scroll";
	
	event.addListener(this.element, "scroll", this.onScrollV.bind(this));

	// 2018/02/07 updated by T.Nishida
	if(bframe.scroll) new bframe.scroll(this.element, 'ace');
};


	14630行目

	this.setInnerHeight = function(height) {
		this.inner.style.height = height + "px";

		// 2018/02/07 updated by T.Nishida
		bframe.fireEvent(this.element, 'resize')
	};


■CKEditor

1.イメージプロパティダイアログボックスを使用して画像を設定する際、widthとheightを設定しないように修正
　指定したい場合は指定可能なため（初期値として自動挿入しないため）

	【修正ファイル】
	bc-admin/js/ckeditor/plugins/image/dialogs/image.js


			var onImgLoadEvent = function() {
					// Image is ready.
					var original = this.originalElement;
					original.setCustomData( 'isReady', 'true' );
					original.removeListener( 'load', onImgLoadEvent );
					original.removeListener( 'error', onImgLoadErrorEvent );
					original.removeListener( 'abort', onImgLoadErrorEvent );

					// Hide loader
					CKEDITOR.document.getById( imagePreviewLoaderId ).setStyle( 'display', 'none' );

					// New image -> new domensions
				//	if ( !this.dontResetSize )
→				//		resetSize( this );	// このfunctionを実行しないように変更

					if ( this.firstLoad )
						CKEDITOR.tools.setTimeout( function() {
						switchLockRatio( this, 'check' );
					}, 0, this );

					this.firstLoad = false;
					this.dontResetSize = false;
				};


2.テーブルセルの下方向に分割バグの修正
　テーブルセルを下方向に分割する際、対象セルが一番右側だった場合、
　分割により挿入されるTDがその行の先頭となっていしまい、表が崩れる。

/* 2018/02/16 version 4.8.0にて修正されている模様 */

　修正個所：plugin/tabletools/plugin.js(572行目）

	function verticalSplitCell( selection, isDetect ) {

			// The destination row is empty, append at will.
			if ( !candidateCell )
			// update by T.Nishida 2014/01/27
			//	newCellTr.append( newCell, true );
				newCellTr.append( newCell, false );　→trueをfalseに変更

3.HTML5 対応
	a,spanタグ配下にインラインタグしか許可しない設定を解除

　修正個所：core/dtd.js(100行目以降）
//		a: Y( P, { a: 1, button: 1 } ), // Treat as normal inline element (not a transparent one).
		↓
		a: F,

//		h1: P,
//		h2: P,
//		h3: P,
//		h4: P,
//		h5: P,
//		h6: P,
		h1: F,
		h2: F,
		h3: F,
		h4: F,
		h5: F,
		h6: F,

//		span: P,
		span: F,

4. AutoGrow
編集なしでsourceエディタから切り替えた場合、scroll barが表示されない件を修正

137行目	
// updated by T.Nishida 2018.06.21 
//			if ( newHeight != currentHeight && lastHeight != newHeight ) {
			if ( newHeight != currentHeight ) {

5. plugins colorbutton

242行目
テキストカラーを「自動」にすると、style="color:null"となる。
style="color:initial"に修正

			if ( config.colorButton_enableAutomatic !== false ) {
				// Render the "Automatic" button.
				output.push( '<a class="cke_colorauto" _cke_focus=1 hidefocus=true' +
					' title="', lang.auto, '"' +
// fixed by T.Nishida 2019/12/12
//					' onclick="CKEDITOR.tools.callFunction(', clickFn, ',null,\'', type, '\');return false;"' +
					' onclick="CKEDITOR.tools.callFunction(', clickFn, ',\'initial\',\'', type, '\');return false;"' +
					' href="javascript:void(\'', lang.auto, '\')"' +
					' role="option" aria-posinset="1" aria-setsize="', total, '">' +
						'<table role="presentation" cellspacing=0 cellpadding=0 width="100%">' +
							'<tr>' +
								'<td colspan="' + colorsPerRow + '" align="center"><span class="cke_colorbox" id="', colorBoxId, '"></span>', lang.auto, '</td>' +
							'</tr>' +
						'</table>' +
					'</a>' );
			}



■CKEditorのビルド
	1.ソースをダウンロードし、その配下にdevディレクトリを作成
	2.buildディレクトリをコピー
	3.コマンドラインでbuild

	a) build.shを開いて下の方のコマンドを環境に合わせてディレクトリなどを変更しコマンドラインから実行する。
		例）実行環境：C:\public_html\ckeditor\dev\builder

		java -jar ckbuilder/$CKBUILDER_VERSION/ckbuilder.jar --build ../../ release --version="4.2 DEV" --build-config build-config.js --overwrite "$@"

			↓

		java -jar ckbuilder.jar --build ../../ release --version="4.2 DEV" --build-config build-config.js --overwrite "$@"


	4.releaseディレクトリに実行形式が出来上がる
